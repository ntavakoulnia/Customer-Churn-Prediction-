{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "96ef39db-ba31-4c75-a2ec-e41b206a248a",
   "metadata": {},
   "source": [
    " # Data Wrangling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "79763af4-b7ae-495c-aa90-2de4edb6895d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>tenure</th>\n",
       "      <th>PhoneService</th>\n",
       "      <th>MultipleLines</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>...</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>Contract</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>Churn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.85</td>\n",
       "      <td>29.85</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>34</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>56.95</td>\n",
       "      <td>1889.5</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>53.85</td>\n",
       "      <td>108.15</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>45</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>42.30</td>\n",
       "      <td>1840.75</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>70.70</td>\n",
       "      <td>151.65</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7038</th>\n",
       "      <td>6840-RESVB</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>24</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>One year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>84.80</td>\n",
       "      <td>1990.5</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7039</th>\n",
       "      <td>2234-XADUH</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>72</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>One year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Credit card (automatic)</td>\n",
       "      <td>103.20</td>\n",
       "      <td>7362.9</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7040</th>\n",
       "      <td>4801-JZAZL</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>11</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.60</td>\n",
       "      <td>346.45</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7041</th>\n",
       "      <td>8361-LTMKD</td>\n",
       "      <td>Male</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>74.40</td>\n",
       "      <td>306.6</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7042</th>\n",
       "      <td>3186-AJIEK</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>66</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Two year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>105.65</td>\n",
       "      <td>6844.5</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7043 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerID  gender  SeniorCitizen Partner Dependents  tenure  \\\n",
       "0     7590-VHVEG  Female              0     Yes         No       1   \n",
       "1     5575-GNVDE    Male              0      No         No      34   \n",
       "2     3668-QPYBK    Male              0      No         No       2   \n",
       "3     7795-CFOCW    Male              0      No         No      45   \n",
       "4     9237-HQITU  Female              0      No         No       2   \n",
       "...          ...     ...            ...     ...        ...     ...   \n",
       "7038  6840-RESVB    Male              0     Yes        Yes      24   \n",
       "7039  2234-XADUH  Female              0     Yes        Yes      72   \n",
       "7040  4801-JZAZL  Female              0     Yes        Yes      11   \n",
       "7041  8361-LTMKD    Male              1     Yes         No       4   \n",
       "7042  3186-AJIEK    Male              0      No         No      66   \n",
       "\n",
       "     PhoneService     MultipleLines InternetService OnlineSecurity  ...  \\\n",
       "0              No  No phone service             DSL             No  ...   \n",
       "1             Yes                No             DSL            Yes  ...   \n",
       "2             Yes                No             DSL            Yes  ...   \n",
       "3              No  No phone service             DSL            Yes  ...   \n",
       "4             Yes                No     Fiber optic             No  ...   \n",
       "...           ...               ...             ...            ...  ...   \n",
       "7038          Yes               Yes             DSL            Yes  ...   \n",
       "7039          Yes               Yes     Fiber optic             No  ...   \n",
       "7040           No  No phone service             DSL            Yes  ...   \n",
       "7041          Yes               Yes     Fiber optic             No  ...   \n",
       "7042          Yes                No     Fiber optic            Yes  ...   \n",
       "\n",
       "     DeviceProtection TechSupport StreamingTV StreamingMovies        Contract  \\\n",
       "0                  No          No          No              No  Month-to-month   \n",
       "1                 Yes          No          No              No        One year   \n",
       "2                  No          No          No              No  Month-to-month   \n",
       "3                 Yes         Yes          No              No        One year   \n",
       "4                  No          No          No              No  Month-to-month   \n",
       "...               ...         ...         ...             ...             ...   \n",
       "7038              Yes         Yes         Yes             Yes        One year   \n",
       "7039              Yes          No         Yes             Yes        One year   \n",
       "7040               No          No          No              No  Month-to-month   \n",
       "7041               No          No          No              No  Month-to-month   \n",
       "7042              Yes         Yes         Yes             Yes        Two year   \n",
       "\n",
       "     PaperlessBilling              PaymentMethod MonthlyCharges  TotalCharges  \\\n",
       "0                 Yes           Electronic check          29.85         29.85   \n",
       "1                  No               Mailed check          56.95        1889.5   \n",
       "2                 Yes               Mailed check          53.85        108.15   \n",
       "3                  No  Bank transfer (automatic)          42.30       1840.75   \n",
       "4                 Yes           Electronic check          70.70        151.65   \n",
       "...               ...                        ...            ...           ...   \n",
       "7038              Yes               Mailed check          84.80        1990.5   \n",
       "7039              Yes    Credit card (automatic)         103.20        7362.9   \n",
       "7040              Yes           Electronic check          29.60        346.45   \n",
       "7041              Yes               Mailed check          74.40         306.6   \n",
       "7042              Yes  Bank transfer (automatic)         105.65        6844.5   \n",
       "\n",
       "     Churn  \n",
       "0       No  \n",
       "1       No  \n",
       "2      Yes  \n",
       "3       No  \n",
       "4      Yes  \n",
       "...    ...  \n",
       "7038    No  \n",
       "7039    No  \n",
       "7040    No  \n",
       "7041   Yes  \n",
       "7042    No  \n",
       "\n",
       "[7043 rows x 21 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import time, pickle, os\n",
    "from sklearn import datasets, model_selection, metrics, svm\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import f1_score, roc_auc_score, confusion_matrix, roc_curve\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold, learning_curve\n",
    "\n",
    "# Dataset loaded in\n",
    "df = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5d2ff39-bf12-4da1-b478-38426dab6980",
   "metadata": {},
   "source": [
    "# Analyze the DataSet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c8ec2877-a5b5-47ec-b4e5-f7094c7b6eb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7043 entries, 0 to 7042\n",
      "Data columns (total 21 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   customerID        7043 non-null   object \n",
      " 1   gender            7043 non-null   object \n",
      " 2   SeniorCitizen     7043 non-null   int64  \n",
      " 3   Partner           7043 non-null   object \n",
      " 4   Dependents        7043 non-null   object \n",
      " 5   tenure            7043 non-null   int64  \n",
      " 6   PhoneService      7043 non-null   object \n",
      " 7   MultipleLines     7043 non-null   object \n",
      " 8   InternetService   7043 non-null   object \n",
      " 9   OnlineSecurity    7043 non-null   object \n",
      " 10  OnlineBackup      7043 non-null   object \n",
      " 11  DeviceProtection  7043 non-null   object \n",
      " 12  TechSupport       7043 non-null   object \n",
      " 13  StreamingTV       7043 non-null   object \n",
      " 14  StreamingMovies   7043 non-null   object \n",
      " 15  Contract          7043 non-null   object \n",
      " 16  PaperlessBilling  7043 non-null   object \n",
      " 17  PaymentMethod     7043 non-null   object \n",
      " 18  MonthlyCharges    7043 non-null   float64\n",
      " 19  TotalCharges      7043 non-null   object \n",
      " 20  Churn             7043 non-null   object \n",
      "dtypes: float64(1), int64(2), object(18)\n",
      "memory usage: 1.1+ MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>tenure</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7043.000000</td>\n",
       "      <td>7043.000000</td>\n",
       "      <td>7043.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.162147</td>\n",
       "      <td>32.371149</td>\n",
       "      <td>64.761692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.368612</td>\n",
       "      <td>24.559481</td>\n",
       "      <td>30.090047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>18.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>35.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>70.350000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>89.850000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>118.750000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       SeniorCitizen       tenure  MonthlyCharges\n",
       "count    7043.000000  7043.000000     7043.000000\n",
       "mean        0.162147    32.371149       64.761692\n",
       "std         0.368612    24.559481       30.090047\n",
       "min         0.000000     0.000000       18.250000\n",
       "25%         0.000000     9.000000       35.500000\n",
       "50%         0.000000    29.000000       70.350000\n",
       "75%         0.000000    55.000000       89.850000\n",
       "max         1.000000    72.000000      118.750000"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Data Set inspection\n",
    "df.shape\n",
    "# Looking for Missing Values\n",
    "df.info()\n",
    "# Data Statistics\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fd6d2f4-cc85-42db-94d4-1e24add52b98",
   "metadata": {},
   "source": [
    "# DATA CLEANING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eb67f74a-59ef-4aaa-92aa-40dfaefe3da8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Handling the missing values in TotalCharges\n",
    "df['TotalCharges'] = df['TotalCharges'].replace(' ', np.nan).astype(float)\n",
    "\n",
    "# Add 0's for missing TotalCharges \n",
    "df['TotalCharges'] = df['TotalCharges'].fillna(0)\n",
    "\n",
    "# Convert SeniorCitizen from int to categorical to identify the Category of individual citizens \n",
    "df['SeniorCitizen'] = df['SeniorCitizen'].map({0: 'No', 1: 'Yes'})\n",
    "df.columns.value_counts().count()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4b3407c-8527-4018-adaf-517ce38e6ddc",
   "metadata": {},
   "source": [
    "## Converted columns to categorical to optimize the dataset before further analysis\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a7f5f99a-e3dd-4134-b5b8-22430957f8f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        No\n",
       "1        No\n",
       "2       Yes\n",
       "3        No\n",
       "4       Yes\n",
       "       ... \n",
       "7038     No\n",
       "7039     No\n",
       "7040     No\n",
       "7041    Yes\n",
       "7042     No\n",
       "Name: Churn, Length: 7043, dtype: category\n",
       "Categories (2, object): ['No', 'Yes']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categories = ['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'PhoneService',\n",
    "            'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup',\n",
    "            'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies',\n",
    "            'Contract', 'PaperlessBilling', 'PaymentMethod', 'Churn']\n",
    "# Turned each column into categorical variables based on (Yes, No).\n",
    "for col in categories:\n",
    "    df[col] = df[col].astype('category')\n",
    "df[col]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d72f6710-16bd-486d-9e5e-37034f3f3c38",
   "metadata": {},
   "source": [
    " ## Box plot created for numerical columns of outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6b481edd-4d3b-4ec4-a9aa-80464060312a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Wanted to Analyize the tenure, monthlycharge, and totalcharges to get an idea of the average charges.\n",
    "num_cols = ['tenure', 'MonthlyCharges', 'TotalCharges']\n",
    "fig, axes = plt.subplots(1, 3, figsize=(15, 5))\n",
    "# looping through the num_cols columns\n",
    "for x, col in enumerate(num_cols):\n",
    "    # A boxplot is created for each 'x' subplot\n",
    "    sns.boxplot(data=df, y=col, ax=axes[x])\n",
    "    # title\n",
    "    axes[x].set_title(col)\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afe5c5c7-cf6d-4315-b55a-9cca4eb550ba",
   "metadata": {},
   "source": [
    "## Box Plot Analysis\n",
    "The median tenure of 29 months shows that half of the customers stay for less than 2.5 years. A median monthly charge of 70 suggests that pricing is typically mid-range, while the median total spend of 1,000 indicates that most customers contribute a modest lifetime value before possibly churning."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d875342c-bd9f-4187-9132-0b9210b54ab9",
   "metadata": {},
   "source": [
    "# Customer Segmentation Based on Tenure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fa779b05-5915-47a8-b42d-1918fdacd217",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       0-1yr\n",
      "1       2-3yr\n",
      "2       0-1yr\n",
      "3       3-4yr\n",
      "4       0-1yr\n",
      "        ...  \n",
      "7038    1-2yr\n",
      "7039    5-6yr\n",
      "7040    0-1yr\n",
      "7041    0-1yr\n",
      "7042    5-6yr\n",
      "Name: tenure_group, Length: 7043, dtype: category\n",
      "Categories (6, object): ['0-1yr' < '1-2yr' < '2-3yr' < '3-4yr' < '4-5yr' < '5-6yr']\n",
      "0        29.850000\n",
      "1        55.573529\n",
      "2        54.075000\n",
      "3        40.905556\n",
      "4        75.825000\n",
      "           ...    \n",
      "7038     82.937500\n",
      "7039    102.262500\n",
      "7040     31.495455\n",
      "7041     76.650000\n",
      "7042    103.704545\n",
      "Name: AvgMonthlyCharge, Length: 7043, dtype: float64\n",
      "0               DSL_Month-to-month\n",
      "1                     DSL_One year\n",
      "2               DSL_Month-to-month\n",
      "3                     DSL_One year\n",
      "4       Fiber optic_Month-to-month\n",
      "                   ...            \n",
      "7038                  DSL_One year\n",
      "7039          Fiber optic_One year\n",
      "7040            DSL_Month-to-month\n",
      "7041    Fiber optic_Month-to-month\n",
      "7042          Fiber optic_Two year\n",
      "Name: InternetContract, Length: 7043, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# I grouped the customers into categories based on the tenure for the years instead of the values.\n",
    "# I created unique bins correlating with each of the years.\n",
    "bins = [-1, 12, 24, 36, 48, 60, 72]\n",
    "labels = ['0-1yr', '1-2yr', '2-3yr', '3-4yr', '4-5yr', '5-6yr']\n",
    "# I then grouped each of the tenures, using the cut function I can turn the numerical data into unique variables so I can categorize the numerical\n",
    "# column easier for instance tensure.\n",
    "df['tenure_group'] = pd.cut(df['tenure'], bins=bins, labels=labels)\n",
    "\n",
    "# I want to create a column that indicates what customers use none of the additional services.\n",
    "services = ['OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies']\n",
    "# The new column is if the customer says no to all of these services, then NoAddServices is 1, or else it is 0. \n",
    "# Returns True if the customer answered No for that particular service.\n",
    "df['NoAddServices'] = (df[services] == 'No').all(axis=1).astype(int)\n",
    "\n",
    "# I then assign each of the customers' monthly charges at the moment as their average.\n",
    "df['AvgMonthlyCharge'] = df['MonthlyCharges']  \n",
    "# Looks to see if the customer has any tensure, being that they worked for the company for at least 1 month. So I do not divide by 0.\n",
    "some_tensure = df['tenure'] > 0  \n",
    "# For customers that dont have 0 tensure, I calcualted the total monthly charge to give a more real scenario regarding their monthly spending.\n",
    "# By dividing their TotalCharges by the tenure.\n",
    "df.loc[some_tensure, 'AvgMonthlyCharge'] = df['TotalCharges'] / df['tenure']\n",
    "\n",
    "# I created an interaction feature between InternetService and Contract to obtain a better analysis if possible.\n",
    "# I converted the InternetService and Contract into strings and seperated by an underscore to better understand how \n",
    "# these combinations impact churn, and making it easier when creating my machine learning models. \n",
    "df['InternetContract'] = df['InternetService'].astype(str) + \"_\" + df['Contract'].astype(str)\n",
    "\n",
    "# Results\n",
    "print(df['tenure_group'])\n",
    "print(df['AvgMonthlyCharge'])\n",
    "print(df['InternetContract'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65d53d96-6cc9-4f42-8b85-e9fbf33b6405",
   "metadata": {},
   "source": [
    "### Post Processing\n",
    "\n",
    "Customers are classified into tenure categories such as \"0-1yr,\" \"2-3yr,\" and \"5-6yr\" based on the results, some of the customers do not engage with additional services (NoAddServices = 1). The InternetContract feature combines internet service types and contract lengths such as 'DSL_Month-to-month'and 'Fiber optic_One year'. The average monthly charge (AvgMonthlyCharge) ranges from 29.85 to 103.20. This suggests that they have distinct churn risks and service usage trends."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2af3b862-1909-4d3c-b4f6-24723784130a",
   "metadata": {},
   "source": [
    "# MACHINE LEARNING MODELING PORTION CHURN OR NO CHURN\n",
    "\n",
    "## (RESAMPLING DATA)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d3e156d6-c9ae-40ed-90d7-03eea4d098df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "New class distribution after resampling:\n",
      "Churn\n",
      "0    4139\n",
      "1    4139\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "from sklearn.utils import resample\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Resampled the classes for the Churn and NonChurn the have the same number of samples\n",
    "\n",
    "X = df.drop(['customerID', 'Churn'], axis=1)\n",
    "# Convert target variable to binary if not already\n",
    "df['Churn'] = df['Churn'].map({'No': 0, 'Yes': 1})\n",
    "\n",
    "# Separate majority and minority classes\n",
    "df_majority = df[df['Churn'] == 0]\n",
    "df_minority = df[df['Churn'] == 1]\n",
    "\n",
    "# Upsample minority class\n",
    "df_minority_upsampled = resample(df_minority,\n",
    "                                 replace=True,                 # Sample with replacement\n",
    "                                 n_samples=len(df_majority),  # Match majority class count\n",
    "                                 random_state=42)             # Reproducibility\n",
    "\n",
    "# Combine majority class with upsampled minority class\n",
    "df_balanced = pd.concat([df_majority, df_minority_upsampled])\n",
    "\n",
    "# Shuffle the combined dataset\n",
    "df_balanced = df_balanced.sample(frac=1, random_state=42).reset_index(drop=True)\n",
    "\n",
    "# Split into features and target\n",
    "X = df_balanced.drop(['customerID', 'Churn'], axis=1)\n",
    "y = df_balanced['Churn']\n",
    "\n",
    "# Split into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=42, stratify=y\n",
    ")\n",
    "\n",
    "# Display new class distribution\n",
    "print(\"New class distribution after resampling:\")\n",
    "print(y_train.value_counts())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "88041d66-b449-488b-9853-9c56a10c24f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the Data for X into categorical and numerical columns.\n",
    "# categorical_cols takes all the columns in X that contain text data/ 'Object Data' - Strings\n",
    "categorical_cols = X.select_dtypes(include='object').columns\n",
    "# numerical_cols is the list of names of all numerical columns like charges and tenure to name a few.\n",
    "numerical_cols = X.select_dtypes(include=['int64', 'float64']).columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "cb6cbe96-4e05-4af1-9e11-1acb257aff45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n",
       "                                 Index([&#x27;tenure&#x27;, &#x27;MonthlyCharges&#x27;, &#x27;TotalCharges&#x27;, &#x27;AvgMonthlyCharge&#x27;], dtype=&#x27;object&#x27;)),\n",
       "                                (&#x27;cat&#x27;, OneHotEncoder(),\n",
       "                                 Index([&#x27;InternetContract&#x27;], dtype=&#x27;object&#x27;))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;ColumnTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for ColumnTransformer</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n",
       "                                 Index([&#x27;tenure&#x27;, &#x27;MonthlyCharges&#x27;, &#x27;TotalCharges&#x27;, &#x27;AvgMonthlyCharge&#x27;], dtype=&#x27;object&#x27;)),\n",
       "                                (&#x27;cat&#x27;, OneHotEncoder(),\n",
       "                                 Index([&#x27;InternetContract&#x27;], dtype=&#x27;object&#x27;))])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">num</label><div class=\"sk-toggleable__content fitted\"><pre>Index([&#x27;tenure&#x27;, &#x27;MonthlyCharges&#x27;, &#x27;TotalCharges&#x27;, &#x27;AvgMonthlyCharge&#x27;], dtype=&#x27;object&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">cat</label><div class=\"sk-toggleable__content fitted\"><pre>Index([&#x27;InternetContract&#x27;], dtype=&#x27;object&#x27;)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;OneHotEncoder<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder()</pre></div> </div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "ColumnTransformer(transformers=[('num', StandardScaler(),\n",
       "                                 Index(['tenure', 'MonthlyCharges', 'TotalCharges', 'AvgMonthlyCharge'], dtype='object')),\n",
       "                                ('cat', OneHotEncoder(),\n",
       "                                 Index(['InternetContract'], dtype='object'))])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# I then preprocess the data to apply the proper techniques to the numerical and categorical columns.\n",
    "# The numerical columns are scaled, while the categorical columns (objects) are converted to numbers via (OneHotEncoder())\n",
    "# so that the machine learning algorithms can use them.\n",
    "preprocessor = ColumnTransformer([\n",
    "    ('num', StandardScaler(), numerical_cols),\n",
    "    ('cat', OneHotEncoder(), categorical_cols)\n",
    "])\n",
    "preprocessor.fit(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6320c29a-4fd4-4874-a402-a1d5a7638000",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Two Models are used: 'Logistic Regression' and 'Random Forest'.\n",
    "# Logistic Regression is used to illustrate and predict a binary outcome, like whether a customer will say yes or no.\n",
    "# Random Forest uses multiple decision trees to vote on the best decision. It reduces the weakness of a single decision tree\n",
    "# by averaging over many trees, reducing overfitting.\n",
    "# !pip install lightgbm\n",
    "from lightgbm import LGBMClassifier\n",
    "\n",
    "models = {\n",
    "    \"Logistic Regression\": {\n",
    "        # up to 1000 iterations are trained with the class weight being balanced to \n",
    "        # adjust the weights inversely proportional to the frequencies of the classes to treat classes fairly.\n",
    "        'model': LogisticRegression(max_iter=1000,random_state=42),\n",
    "        # classifier_C represents the model inside a pipeline, using values small to large, illustrates the complexity of the model\n",
    "        # smaller=less complex, with larger=potential overfitting\n",
    "        'params': {\n",
    "            'classifier__C': [0.1, 1],  # Reduced options\n",
    "            'classifier__solver': ['liblinear'],  # Fastest solver\n",
    "            'classifier__class_weight': ['balanced', None]\n",
    "        }\n",
    "    },\n",
    "        \"Random Forest\": {\n",
    "        # the class weight being balanced to adjust the weights inversely proportional to the frequencies \n",
    "        # of the classes to treat classes fairly.\n",
    "        'model': RandomForestClassifier(random_state=42,n_jobs=-1,warm_start=True,oob_score=True),\n",
    "        # n_estimators represnts the number of decision tress to build \n",
    "        'params': {\n",
    "            'classifier__n_estimators': [200, 250],  # More trees for stability\n",
    "            'classifier__max_depth': [None],         # Let trees grow fully\n",
    "            'classifier__min_samples_split': [2, 3], # More flexible splits\n",
    "            'classifier__min_samples_leaf': [1, 2],  # Smaller leaves\n",
    "            'classifier__max_samples': [0.6],        # More diversity in trees\n",
    "            'classifier__max_features': [0.2, 0.25], # Stricter feature sampling\n",
    "            'classifier__class_weight': [\n",
    "                {0:1, 1:3},  # Aggressive churner weighting\n",
    "                'balanced_subsample'  # Better than 'balanced' for RF\n",
    "            ],\n",
    "            'classifier__ccp_alpha': [0, 0.001]  # Cost-complexity pruning\n",
    "        }\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e26abeba-6a2f-4c23-86fb-b5561c0806da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Logistic Regression\n",
      "Fitting 5 folds for each of 4 candidates, totalling 20 fits\n",
      "\n",
      "Training Random Forest\n",
      "Fitting 5 folds for each of 64 candidates, totalling 320 fits\n"
     ]
    }
   ],
   "source": [
    "# Created empty dictionaries to store the evaluation results and best models\n",
    "results = {}\n",
    "best_models = {}\n",
    "\n",
    "# Looped through each  of the models (Logistic Regression and Random Forest)\n",
    "for model_name in models:\n",
    "    print(f\"\\nTraining {model_name}\")\n",
    "\n",
    "\n",
    " # Created a pipeline that preprocesses and then trains the models \n",
    " # (Logistic Regression and Random Forest) for numeric and categorical data.\n",
    "    pipeline = Pipeline([\n",
    "        ('preprocessing', preprocessor),      \n",
    "        ('classifier', models[model_name]['model'])      \n",
    "    ])\n",
    "\n",
    "    # Used GridSearchCV to try different model parameters and pick the best one\n",
    "    grid_search = GridSearchCV(\n",
    "        # Added Pipeline\n",
    "        estimator=pipeline,                    \n",
    "        # Parameter options \n",
    "         param_grid=models[model_name]['params'],\n",
    "        # Evaluated the F1 score\n",
    "        scoring='f1',\n",
    "        # Used 5 fold cross validation to preserve the class balance\n",
    "        cv=StratifiedKFold(5, shuffle=True, random_state=42),  # Better CV setup\n",
    "        # Using all CPU cores to run it as quick as possible\n",
    "        n_jobs=-1, \n",
    "        verbose=1  # Shows progress\n",
    "    )\n",
    "\n",
    "    # Measured how long the training takes\n",
    "    # Starting timing\n",
    "    start_time = time.time()  \n",
    "    # Trained the models with the training data using grid_search and then fitting the data.\n",
    "    grid_search.fit(X_train, y_train)   \n",
    "    # Ending timing\n",
    "    train_time = time.time() - start_time  \n",
    "\n",
    "    # Saved the best version of the model \n",
    "    best_models[model_name] = grid_search.best_estimator_\n",
    "\n",
    "\n",
    "\n",
    "    # Predicted the test set labels using the trained model\n",
    "    predictions = grid_search.predict(X_test)\n",
    "\n",
    "    # Predicted the probabilities of a positive class for AUC (area under the curve) score\n",
    "    probabilities = grid_search.predict_proba(X_test)[:, 1]\n",
    "\n",
    "    # Saved the performance metrics for this model\n",
    "    results[model_name] = {\n",
    "        # Best hyperparameters\n",
    "        'Best Parameters': grid_search.best_params_, \n",
    "        # How long training took (Training Time)\n",
    "        'Training Time (seconds)': round(train_time, 2),\n",
    "         # F1 score based on test data \n",
    "        'F1 Score': f1_score(y_test, predictions),  \n",
    "         # Area Under Curve Score \n",
    "        'ROC AUC Score': roc_auc_score(y_test, probabilities)    \n",
    "    }\n",
    "    # # 🔽 Save this model and preprocessor using a model-specific name\n",
    "    # joblib.dump(grid_search.best_estimator_, f'{model_name.lower().replace(\" \", \"_\")}_model.pkl')\n",
    "    # joblib.dump(preprocessor, 'churn_preprocessor.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "850d7a49-d551-41c8-8150-978f582545d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Summary:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Training Time (seconds)</th>\n",
       "      <th>F1 Score</th>\n",
       "      <th>ROC AUC Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Logistic Regression</th>\n",
       "      <td>0.11</td>\n",
       "      <td>0.770499</td>\n",
       "      <td>0.835225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Random Forest</th>\n",
       "      <td>41.5</td>\n",
       "      <td>0.887809</td>\n",
       "      <td>0.946634</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Training Time (seconds)  F1 Score ROC AUC Score\n",
       "Logistic Regression                    0.11  0.770499      0.835225\n",
       "Random Forest                          41.5  0.887809      0.946634"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Converted Results to df\n",
    "results_df = pd.DataFrame(results).T\n",
    "print(\"Model Summary:\")\n",
    "results_df[['Training Time (seconds)','F1 Score','ROC AUC Score']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "2c4a65f5-ec4d-48a4-8445-599de00dae5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Based on all the Models, I found the one with the best performance.\n",
    "\n",
    "# the best_model_name find the model that performed the bested using the F1 Score with idxmax() \n",
    "# giving the index of the row with tthe maximum value for 'F1 Score' column.\n",
    "best_model_name = results_df['F1 Score'].idxmax()\n",
    "\n",
    "#The actual trained model pipeline was retreived from the best_models dictionary \n",
    "# using the best_model_name.\n",
    "final_model = best_models[best_model_name]\n",
    "\n",
    "import pickle\n",
    "\n",
    "# Save the fitted preprocessor\n",
    "with open('preprocessor.pkl', 'wb') as f:\n",
    "    pickle.dump(preprocessor, f)\n",
    "\n",
    "# Save the trained model\n",
    "with open('model.pkl', 'wb') as f:\n",
    "    pickle.dump(final_model, f)\n",
    "    \n",
    "# Generated class predictions (0 or 1) for the test set\n",
    "# for the best model in final_model.\n",
    "y_pred = final_model.predict(X_test)\n",
    "\n",
    "# Generated predicted probabilities \n",
    "# predict_proba() returns a 2D array of probabilities for each class [P(class0), P(class1)]\n",
    "y_prob = final_model.predict_proba(X_test)[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "fc3898ff-917c-4991-b203-6981fa2921b3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The confusion Matrix illustrates the false positve/negative as well as the true postive and negatives plotted using seaborn\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "# A heatmap was generated to illustrate the False and True Values.\n",
    "sns.heatmap(cm, annot=True, fmt='d')\n",
    "# Tittle and Labels of the plot using mat[plotlib.\n",
    "plt.title(f'{best_model_name} - Confusion Matrix')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e98057c8-ea7c-4552-bcf9-e3744c80c3f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculates False Positive Rate (FPR) and True Positive Rate (TPR) for ROC curve\n",
    "false_pos, true_pos, _ = roc_curve(y_test, y_prob)\n",
    "#Ploted the ROC curve with the AUC score\n",
    "plt.plot(false_pos, true_pos, label=f\"AUC = {roc_auc_score(y_test, y_prob):.3f}\")\n",
    "# Added a line illustrating the diagonal random guess.\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.title(f'{best_model_name} - ROC Curve')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0b9c09e-d263-4ade-b6af-518c392022ae",
   "metadata": {},
   "source": [
    "# ROC Curve Analysis\n",
    "Based on the Area under the curve score of 0.947 for the sampled data compared to 0.841 for the non-resampled data it tells us that the model does aa even better job ranking the churning customer higher then the nonchurning customer 95% of the time and could be a strong performing model for churn prediction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f6fe8c9-f65c-44a6-aef0-9cbae7250f6f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "6a9c535a-46df-48d4-a057-5eb876e78d25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the Scores for the F1 and Training samples in regards to train and validations.\n",
    "train_sizes, train_scores, val_scores = learning_curve(final_model, X_train, y_train, cv=5, scoring='f1')\n",
    "plt.plot(train_sizes, np.mean(train_scores, axis=1), label=\"Train\")\n",
    "plt.plot(train_sizes, np.mean(val_scores, axis=1), label=\"Validation\")\n",
    "plt.title(f\"{best_model_name} - Learning Curve\")\n",
    "plt.xlabel(\"Training Samples\")\n",
    "plt.ylabel(\"F1 Score\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "5b55ef46-1787-4878-9b07-a2dccae909be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9740946294117754\n",
      "0.821060354139806\n"
     ]
    }
   ],
   "source": [
    "print(train_scores.mean())\n",
    "print(val_scores.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6717b75-108b-453c-9c49-a19dc10baa84",
   "metadata": {},
   "source": [
    "\n",
    "# Learning Curve Analysis \n",
    "Based on my validation set after resampling the data to get the same number of Churns to Non-Churns,the results\n",
    "are much better. Almost all churn cases (97%) are captured. The classifier for Random Forest makes very few errors,\n",
    "with a precision and F1 scores above 85 percent. Resampling worked well for my model is now better at recognizing the minority class. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "45adf580-8b8a-4741-bdec-6610e634ec87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "   Non-Churn       0.96      0.78      0.86      1035\n",
      "       Churn       0.82      0.97      0.89      1035\n",
      "\n",
      "    accuracy                           0.88      2070\n",
      "   macro avg       0.89      0.88      0.88      2070\n",
      "weighted avg       0.89      0.88      0.88      2070\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "# Classification report for the predictions made vs the test results\n",
    "print(classification_report(y_test, y_pred, target_names=['Non-Churn', 'Churn']))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4dea7ae-cf1c-48e2-a892-de89c3449672",
   "metadata": {},
   "source": [
    "# Classification Report Analysis\n",
    "\n",
    "Based on my results I dont believe my model is more optimal then the unsampled model. I have a great F1 for churn at 89%. I have a high recall for churn at 78% meaning that I am catching most of the at risk customers and even have an great F1 for non churn at 89%. The model performs much bette when resampling the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3e3a92a-471a-4889-b5ed-4b36ef9e027c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "285eb96b-d3d5-480c-9826-488383f7fb52",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a62fd57-0d16-45e0-b83d-79eb064f9b5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97c57fb2-587b-40f3-bf72-baad483beec1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce9f0bcf-ec2f-4da4-905a-6a9288294b5e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82f21cfa-a138-4510-bc98-f1c166a2bde3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70ba7188-3af8-4b0c-a78a-4822eedf9635",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "526e3ca9-b7fd-4c03-af01-71f9632fbf9e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64339027-b157-4dbc-bfa1-0b079dfc2f34",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "613e90e4-37de-4b4a-9c2a-46c036b6ccad",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01a9dd9d-60c1-4d26-a2d7-3eb0bbbecbf9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c7188ba-9e8f-44b7-9fc5-577fbb5c886a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2bf4ae78-2655-4632-95e3-19d9556e1614",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
